import{_ as a,o as s,c as o,M as t}from"./chunks/framework.37cd2f1b.js";const y=JSON.parse('{"title":"Formatting","description":"","frontmatter":{},"headers":[],"relativePath":"cli/usage/formatting.md","filePath":"cli/usage/formatting.md","lastUpdated":1655402809000}'),e={name:"cli/usage/formatting.md"},n=t('<h1 id="formatting" tabindex="-1">Formatting <a class="header-anchor" href="#formatting" aria-label="Permalink to &quot;Formatting&quot;">​</a></h1><p>It is possible to format files in-place or via standard i/o.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">taplo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fmt</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">foo.toml</span></span></code></pre></div><p>Or</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">foo.toml</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">taplo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fmt</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>By default Taplo will bail on documents that contain syntax errors to avoid destructive edits, you can use the <code>--force</code> flag to suppress this and try to format the invalid document(s) anyway.</p></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><p>Formatter options are read from the <a href="./configuration.html#configuration-file">configuration file</a>, on top of that it is possible to specify overrides via the <code>--option</code> flag:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">taplo</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">fmt</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--option</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">indent_tables=</span><span style="color:#89DDFF;">false</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">foo.toml</span></span></code></pre></div><h2 id="check" tabindex="-1">Check <a class="header-anchor" href="#check" aria-label="Permalink to &quot;Check&quot;">​</a></h2><p>It is possible to check whether the given files are properly formatted via the <code>--check</code> flag. When this flag is supplied, no formatting will be done.</p>',11),l=[n];function p(c,i,r,d,h,f){return s(),o("div",null,l)}const u=a(e,[["render",p]]);export{y as __pageData,u as default};
